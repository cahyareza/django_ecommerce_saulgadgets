Index: saulgadgets_3_8_7/saulgadgets/apps/store/api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.conf import settings\nfrom django.http import JsonResponse, HttpResponse\nfrom django.shortcuts import get_object_or_404, redirect\nimport json\nimport stripe\nimport razorpay\nfrom paypalcheckoutsdk.core import PayPalHttpClient, SandboxEnvironment\nfrom paypalcheckoutsdk.orders import OrdersCaptureRequest\n\nfrom django.core.mail import EmailMultiAlternatives\n\nfrom django.template.loader import render_to_string\n\nfrom apps.orders.views import render_to_pdf\n\nfrom apps.cart.cart import Cart\n\nfrom apps.orders.utils import checkout\n\nfrom .models import Product\nfrom apps.orders.models import Order\n\nfrom apps.coupon.models import Coupon\n\nfrom .utilities import decrement_product_quantity, send_order_confirmation\n\ndef validate_payment(request):\n    data = json.loads(request.body)\n    razorpay_payment_id = data['razorpay_payment_id']\n    razorpay_order_id = data['razorpay_order_id']\n    razorpay_signature = data['razorpay_signature']\n\n    client = razorpay.Client(auth=(settings.RAZORPAY_API_KEY_PUBLISHABLE, settings.RAZORPAY_API_KEY_HIDDEN))\n\n    params_dict = {\n        'razorpay_payment_id': razorpay_payment_id,\n        'razorpay_order_id': razorpay_order_id,\n        'razorpay_signature': razorpay_signature\n    }\n\n    res = client.utility.verify_payment_signature(params_dict)\n\n    if not res:\n        order = Order.objects.get(payment_intent=razorpay_order_id)\n        order.paid = True\n        order.save()\n\n    decrement_product_quantity(order)\n\n    send_order_confirmation(order)\n\n    return JsonResponse({'success': True})\n\n\ndef create_checkout_session(request):\n    data = json.loads(request.body)\n\n    # Coupon\n\n    coupon_code = data['coupon_code']\n    coupon_value = 0\n\n    if coupon_code != '':\n        coupon = Coupon.objects.get(code=coupon_code)\n\n        if coupon.can_use():\n            coupon_value = coupon.value\n            coupon.use()\n\n\n    cart = Cart(request)\n\n    items = []\n\n    for item in cart:\n        product = item['product']\n\n        price = int(product.price * 100)\n\n        if coupon_value > 0:\n            price = int(price * (int(coupon_value) / 100))\n\n        obj = {\n            'price_data': {\n                'currency': 'usd',\n                'product_data': {\n                    'name': product.title\n                },\n                'unit_amount': price\n            },\n            'quantity': item['quantity']\n        }\n\n        items.append(obj)\n\n        gateway = data['gateway']\n        session = ''\n        order_id = ''\n        payment_intent = ''\n\n        if gateway == 'stripe':\n            stripe.api_key = settings.STRIPE_API_KEY_HIDDEN\n            session = stripe.checkout.Session.create(\n                payment_method_types=['card'],\n                line_items=items,\n                mode='payment',\n                success_url='http://127.0.0.1:8000/cart/success/',\n                cancel_url='http://127.0.0.1:8000/cart/'\n            )\n            payment_intent = session.payment_intent\n\n        # create order\n        first_name = data['first_name']\n        last_name = data['last_name']\n        email = data['email']\n        address = data['address']\n        zipcode = data['zipcode']\n        place = data['place']\n        phone = data['phone']\n\n        orderid = checkout(request, data['first_name'], data['last_name'], data['email'], data['address'], data['zipcode'], data['place'], data['phone'])\n\n        total_price = 0.00\n\n        for item in cart:\n            product = item['product']\n            total_price = total_price + (float(product.price) * int(item['quantity']))\n\n        if coupon_value > 0:\n            total_price = total_price * (coupon_value / 100)\n\n        if gateway == 'razorpay':\n            order_amount = total_price * 100\n            order_currency = 'INR'\n            client = razorpay.Client(auth=(settings.RAZORPAY_API_KEY_PUBLISHABLE, settings.RAZORPAY_API_KEY_HIDDEN))\n            data = {\n                'amount': order_amount,\n                'currency': order_currency\n            }\n            payment_intent = client.order.create(data=data)\n\n            # PayPal\n\n        if gateway == 'paypal':\n            order_id = data['order_id']\n            print(order_id)\n            environment = SandboxEnvironment(client_id=settings.PAYPAL_API_KEY_PUBLISHABLE, client_secret=settings.PAYPAL_API_KEY_HIDDEN)\n            client = PayPalHttpClient(environment)\n            print(client, 'lll')\n\n            request = OrdersCaptureRequest(order_id)\n            print(request, 'zzz')\n            # response = client.execute(request)\n            # print(response, 'ttt')\n\n            order = Order.objects.get(pk=orderid)\n            order.paid_amount = total_price\n            order.used_coupon = coupon_code\n\n            if response.result.status == 'COMPLETED':\n                order.paid = True\n                order.payment_intent = order_id\n                order.save()\n\n                decrement_product_quantity(order)\n                send_order_confirmation(order)\n            else:\n                order.paid = False\n                order.save()\n        else:\n            order = Order.objects.get(pk=orderid)\n            if gateway == 'razorpay':\n                order.payment_intent = payment_intent['id']\n            else:\n                order.payment_intent = payment_intent\n            order.paid_amount = total_price\n            order.used_coupon = coupon_code\n            order.save()\n\n        return JsonResponse({'session': session, 'order': payment_intent})\n\ndef api_add_to_cart(request):\n    # JSON.loads, parse a valid JSON string and convert it to python dictionary\n    data = json.loads(request.body)\n    jsonresponse = {'success': True}\n    # get value of dictionary\n    product_id = data['product_id']\n    update = data['update']\n    quantity = data['quantity']\n\n    # initialize objects cart\n    cart = Cart(request)\n\n    # get same product as json load\n    product = get_object_or_404(Product, pk=product_id)\n\n    if not update:\n        # use method in Cart class\n        cart.add(product=product, quantity=1, update_quantity=False)\n\n    else:\n        cart.add(product=product, quantity=quantity, update_quantity=True)\n\n    # convert dictionary to JSON string\n    return JsonResponse(jsonresponse)\n\ndef api_remove_from_cart(request):\n    # JSON.loads, parse a valid JSON string and convert it to python dictionary\n    data = json.loads(request.body)\n    jsonresponse = {'success': True}\n    # get value of dictionary\n    product_id = str(data['product_id'])\n\n    # initialize objects cart\n    cart = Cart(request)\n\n    cart.remove(product_id)\n\n    return JsonResponse(jsonresponse)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- saulgadgets_3_8_7/saulgadgets/apps/store/api.py	(revision 99a6d88ddfa11cb3afd13b092e9f02710eb9c460)
+++ saulgadgets_3_8_7/saulgadgets/apps/store/api.py	(date 1634113915000)
@@ -150,7 +150,7 @@
 
             request = OrdersCaptureRequest(order_id)
             print(request, 'zzz')
-            # response = client.execute(request)
+            response = client.execute(request)
             # print(response, 'ttt')
 
             order = Order.objects.get(pk=orderid)
